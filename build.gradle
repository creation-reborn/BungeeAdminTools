apply plugin: "java"
apply plugin: "maven"
apply plugin: "signing"

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "nz.co.lolnet"
archivesBaseName = "bungeeadmintools"
version = "1.5.3-premium"

configurations {
    provided {
        compile.extendsFrom(provided)
    }

    build.dependsOn("uploadArchives")
}

repositories {
    mavenCentral()
    maven {
        name = "md-5"
        url = "https://repo.md-5.net/content/groups/public"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        name = "wea-ondara"
        url = "http://repo.wea-ondara.net/repository/public"
    }
}

dependencies {
    provided("com.imaginarycode.minecraft:RedisBungee:0.3.8-INTERIM")
    compile("com.zaxxer:HikariCP:3.2.0")
    provided("mysql:mysql-connector-java:5.1.46")
    provided("net.alpenblock:BungeePerms:3.0-dev-52")
    provided("net.cubespace:Yamler-Core:2.4.0-SNAPSHOT")
    provided("net.md-5:bungeecord-api:1.12-SNAPSHOT")
    compile("org.slf4j:slf4j-nop:1.7.25")
}

task javadocJar(type: Jar) {
    classifier = "javadoc"
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from {
        (configurations.compile - configurations.provided).findAll({
            it.isDirectory() || it.name.endsWith(".jar")
        }).collect({
            it.isDirectory() ? it : zipTree(it)
        })
    }
}

processResources {
    from("LICENSE")
    rename("LICENSE", "LICENSE-" + archivesBaseName)

    from (sourceSets.main.resources.srcDirs) {
        include("plugin.yml")
        expand("name": archivesBaseName, "version": version)
    }
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

uploadArchives {
    repositories {
        if (project.hasProperty("maven.url")) {
            mavenDeployer {
                project.logger.lifecycle("Uploading Archives")
                repository(url: project.property("maven.url"))

                pom {
                    groupId = project.group
                    artifactId = project.archivesBaseName
                    version = project.version
                    project {
                        name = project.archivesBaseName
                        packaging = "jar"

                        scm {
                            url = "https://github.com/lolnetnz/BungeeAdminTools"
                            connection = "scm:git:https://github.com/lolnetnz/BungeeAdminTools.git"
                            developerConnection = "scm:git:git@github.com:lolnetnz/BungeeAdminTools.git"
                        }

                        issueManagement {
                            system = "GitHub Issues"
                            url = "https://github.com/lolnetnz/BungeeAdminTools/issues"
                        }
                    }
                }
            }
        }
    }
}

task signJar {
    doFirst {
        if (!project.hasProperty("signing.keyStorePath") || !project.hasProperty("signing.secretKeyRingFile")) {
            project.logger.warn("========== [WARNING] ==========")
            project.logger.warn("")
            project.logger.warn("   This build is not signed!   ")
            project.logger.warn("")
            project.logger.warn("========== [WARNING] ==========")
            throw new StopExecutionException()
        }
    }

    doLast {
        configurations.archives.allArtifacts.files.each {
            ant.signjar(
                jar: it,
                alias: project.property("signing.alias"),
                storepass: project.property("signing.keyStorePassword"),
                keystore: project.property("signing.keyStorePath"),
                keypass: project.property("signing.keyStorePassword"),
                preservelastmodified: project.property("signing.preserveLastModified"),
                tsaurl: project.property("signing.timestampAuthority"),
                digestalg: project.property("signing.digestAlgorithm")
            )
            project.logger.lifecycle("JAR Signed: " + it.name)

            signing.sign(it)
            project.logger.lifecycle("PGP Signed: " + it.name)
        }
    }
}